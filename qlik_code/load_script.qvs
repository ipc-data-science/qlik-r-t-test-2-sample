/*
Mapping tab
*/
Map_Sex:
Mapping
Load * Inline [
SEX, sex,
1, Men
2, Women
];

Map_Period:
Mapping
Load * Inline [
PERIOD, period,
1, Period 1
2, Period 2
3, Period 3
];

Map_Bpmeds:
Mapping
Load * Inline [
BPMEDS, bpmeds,
0, Not currently used
1, Current Use
];

Map_Cursmoke:
Mapping
Load * Inline [
CURSMOKE, cursmoke,
0, Not current smoker
1, Current smoker
];

Map_Cigpday:
Mapping
Load * Inline [
CIGPDAY, cigpday,
0, Not current smoker
];

Map_Educ:
Mapping
Load * Inline [
educ, Educ,
1, 0-11 years
2, High School Diploma, GED
3, 'Some College, Vocational School'
4, 'College (BS, BA) degree or more'
];

Map_Diabetes:
Mapping
Load * Inline [
DIABETES, diabetes,
0, Not a diabetic
1, Diabetic
];

Map_Prevap:
Mapping
Load * Inline [
PREVAP, prevap,
0, Free of disease
1, Prevalent disease
];

Map_Prevchd:
Mapping
Load * Inline [
PREVCHD, prevchd,
0, Free of disease
1, Prevalent disease
];

Map_Prevmi:
Mapping
Load * Inline [
PREVMI, prevmi,
0, Free of disease
1, Prevalent disease
];

Map_Prevstrk:
Mapping
Load * Inline [
PREVSTRK, prevstrk,
0, Free of disease
1, Prevalent disease
];

Map_Prevhyp:
Mapping
Load * Inline [
PREVHYP, prevhyp,
0, Free of disease
1, Prevalent disease
];



/*
Framingham data tab
*/
Framingham:
LOAD
    RANDID,
    SEX as SexFlag,
	if(PERIOD = '1', SEX) As SEX_p1,
    if(PERIOD = '2', SEX) As SEX_p2,
    if(PERIOD = '3', SEX) As SEX_p3,
    ApplyMap('Map_Sex',SEX,'Not Avaliable') as SEX,
    Num(TOTCHOL) as TOTCHOL,
    if(Num(TOTCHOL) < 125, 'Low'
        , if(Num(TOTCHOL) <= 200, 'Normal'
            , if(Num(TOTCHOL) > 200, 'High'
    ))) As [Cholesterol Range],
    if(PERIOD = '1', TOTCHOL) As TOTCHOL_p1,
    if(PERIOD = '2', TOTCHOL) As TOTCHOL_p2,
    if(PERIOD = '3', TOTCHOL) As TOTCHOL_p3,
    "AGE",
    if([AGE] <= 42, Dual('32 - 42', 1),
    if([AGE] <= 52, Dual('43 - 52', 2),
    if([AGE] <= 62, Dual('53 - 62', 3),
    if([AGE] <= 72, Dual('63 - 72', 4),
    if([AGE] <= 81, Dual('73 - 81', 5)
    ))))) As [AGE Range],
    SYSBP,
    DIABP,    
    CURSMOKE as CursmokeFlag,
    ApplyMap('Map_Cursmoke',CURSMOKE,'Not Avaliable') as CURSMOKE,
    CIGPDAY as CigpdayFlag,
    ApplyMap('Map_Cigpday',CIGPDAY,CIGPDAY) as CIGPDAY,
    Num(BMI) as BMI,
    if(SEX=1, Num(BMI)) as BMI_Men,
    if(SEX=2, Num(BMI)) as BMI_Women,
    if([BMI] <= 18.5, Dual('-18.5 (Underweight)', 1),
    if([BMI] <= 24.9, Dual('18.5 - 24.9 (Normal)', 2),
    if([BMI] < 30, Dual('25 - 29.9 (Overweight)', 3),
    if([BMI] >= 30, Dual('30+ (Obese)', 4)
    )))) As [BMI Range],
    DIABETES as DiabetesFlag,
    ApplyMap('Map_Diabetes',DIABETES,'Not Avaliable') as DIABETES,
    BPMEDS as BpmedsFlag,
    ApplyMap('Map_Bpmeds',BPMEDS,'Not Avaliable') as BPMEDS,
    HEARTRTE,
    Num(GLUCOSE) as GLUCOSE,
    if(Num(GLUCOSE) < 80, Dual('Low', 1)
        , if(Num(GLUCOSE) <= 125, Dual('Normal', 2)
            , if(Num(GLUCOSE) > 125, Dual('High', 3)
    ))) As [GLUCOSE Range],
    educ as EducFlag,
    Dual(ApplyMap('Map_Educ',educ,'Not Avaliable'),educ) as EDUC,
    PREVCHD as PrevchdFlag,
    ApplyMap('Map_Prevchd',PREVCHD,'Not Avaliable') as PREVCHD,
    PREVAP as PrevapFlag,
    ApplyMap('Map_Prevap',PREVAP,'Not Avaliable') as PREVAP,
    PREVMI as PrevmiFlag,
    ApplyMap('Map_Prevmi',PREVMI,'Not Avaliable') as PREVMI,
    PREVSTRK as PrevstrkFlag,
    ApplyMap('Map_Prevstrk',PREVSTRK,'Not Avaliable') as PREVSTRK,
    PREVHYP as PrevhypFlag,
    ApplyMap('Map_Prevhyp',PREVHYP,'Not Avaliable') as PREVHYP,
    "TIME",
    PERIOD as PeriodFlag,
    ApplyMap('Map_Period',PERIOD,'Not Avaliable') as PERIOD,
    HDLC,
    LDLC,
    DEATH,
    ANGINA,
    HOSPMI,
    MI_FCHD,
    ANYCHD,
    STROKE,
    CVD,
    HYPERTEN,
    TIMEAP,
    TIMEMI,
    TIMEMIFC,
    TIMECHD,
    TIMESTRK,
    TIMECVD,
    TIMEDTH,
    TIMEHYP
FROM [lib://YOUR_CONNECTION_HERE:DataFiles/Framingham_Data.csv]
(txt, codepage is 28591, embedded labels, delimiter is ',', msq);


/*
Reference Stat Tables tab
*/

// T1:
// Load * Inline [
// Year, Product, Jan, Feb, Mar, Apr
// 2000, Toy, 100, 200, 300, 400
// 2001, Toy, 500, 600, 700, 800];
// CrossTable(Months,Sales,2)
// T2:
// Load *
// Resident T1;
// Drop table T1;

// for 95% CF
// If it is one tail: use the column 0.05
// If it is two tail: use the column 0.025
T_Reference_temp:
LOAD
    "degrees of freedom" As t_df,
    "0.025" As t_value
FROM [lib://Statistics:DataFiles/StatisticsTables_forLoad.xls]
(biff, embedded labels, table is [t table$]);

T_Reference:
Load
	RowNo() As t_row,
    t_df,
    t_value
Resident T_Reference_temp
Order By t_df;

Drop table T_Reference_temp;


// Chi2
Chi2_Reference_Temp:
LOAD
    df As Chi2_df,
    "0.05" As Chi2_value
FROM [lib://Statistics:DataFiles/Chi_square_forLoad.xls]
(biff, embedded labels, table is [chi square table$]);


Chi2_Reference:
Load 
	RowNo() As chi2_row,
    Chi2_df,
    Chi2_value
Resident Chi2_Reference_Temp
Order By Chi2_df;


Drop Table Chi2_Reference_Temp;






/*
Participant Change tab
*/

Participants:
Load *,
	/*
    The change is calculated by the Last measure - the First Measure
    Alt helps to find the Last and First
    Documentation for Alt: https://help.qlik.com/en-US/cloud-services/Subsystems/Hub/Content/Sense_Hub/Scripting/ConditionalFunctions/alt.htm
    */
	 Alt([P3 SYSBP], Alt([P2 SYSBP], [P1 SYSBP])) // Last Measure
     - 
     Alt([P1 SYSBP], Alt([P2 SYSBP], [P3 SYSBP])) // First Measure
     As [Total SYSBP Change],
     
     Alt([P3 TOTCHOL], Alt([P2 TOTCHOL], [P1 TOTCHOL])) // Last Measure
     - 
     Alt([P1 TOTCHOL], Alt([P2 TOTCHOL], [P3 TOTCHOL])) // First Measure
     As [Total CHOL Change]
;
Load
	RANDID,
    1 As ParticipantFlag,
    Count(VisitNo) As Visits,
    Max(SYSBP_p1) As [P1 SYSBP],
    Max(SYSBP_p2) As [P2 SYSBP],
    Max(SYSBP_p3) As [P3 SYSBP],
    Max(TOTCHOL_p1) As [P1 TOTCHOL],
    Max(TOTCHOL_p2) As [P2 TOTCHOL],
    Max(TOTCHOL_p3) As [P3 TOTCHOL]    
Resident Framingham
Group By RANDID;

